# fwd_diff_fit <- data.table(data)[,lapply(.SD,function(x){encode_fwd_diff(x, dvcol)$fit}),.SDcols=cat_cols]
fwd_diff_fit <- list()
for(i in cat_cols)
{
fwd_diff_fit[[i]] <- encode_fwd_diff(data[,i], dvcol)$fit
}
bwd_diff_encoded <- data.table(data)[,lapply(.SD,function(x){encode_bwd_diff(x, dvcol)$encoded}),.SDcols=cat_cols]
bwd_diff_encoded <- cbind(bwd_diff_encoded, dvcol)
# bwd_diff_fit <- data.table(data)[,lapply(.SD,function(x){encode_bwd_diff(x, dvcol)$fit}),.SDcols=cat_cols]
bwd_diff_fit <- list()
for(i in cat_cols)
{
bwd_diff_fit[[i]] <- encode_bwd_diff(data[,i], dvcol)$fit
}
label_encoded <- data.table(data)[,lapply(.SD,function(x){encode_label(x)$encoded}),.SDcols=cat_cols]
label_encoded <- cbind(label_encoded, dvcol)
# label_fit <- data.table(data)[,lapply(.SD,function(x){encode_label(x)$fit}),.SDcols=cat_cols]
label_fit <- list()
for(i in cat_cols)
{
label_fit[[i]] <- encode_label(data[,i])$fit
}
one_hot_encoded <- data.frame()
one_hot_fit <- list()
for (i in cat_cols)
{
# print(i)
one_hot <- encode_onehot(data[, cat_cols], i)
ifelse(length(one_hot_encoded) == 0, one_hot_encoded <- one_hot$encoded, one_hot_encoded <- cbind(one_hot_encoded, one_hot$encoded))
one_hot_fit[[i]] <- one_hot$fit
}
one_hot_encoded <- cbind(one_hot_encoded, dvcol)
binary_encoded <- data.frame(mapply(encode_binary, data.table(data[, cat_cols]), cat_cols))
binary_encoded <- cbind(binary_encoded, dvcol)
binary_fit <- mapply(encode_binary, data.table(data[, cat_cols]), cat_cols, T)
freq_encoded <- data.table(data)[,lapply(.SD,function(x){encode_freq(x)$encoded}),.SDcols=cat_cols]
freq_encoded <- cbind(freq_encoded, dvcol)
# freq_fit <- data.table(data)[,lapply(.SD,function(x){encode_freq(x)$fit}),.SDcols=cat_cols]
freq_fit <- list()
for(i in cat_cols)
{
freq_fit[[i]] <- encode_freq(data[,i])$fit
}
hash_encoded <- data.frame()
hash_fit <- list()
for (i in cat_cols)
{
hash <- encode_hash(data[, cat_cols], i)
ifelse(length(hash_encoded) == 0, hash_encoded <- hash$encoded, hash_encoded <- cbind(hash_encoded, hash$encoded))
hash_fit[[i]] <- hash$fit
}
colnames(hash_encoded) <- cat_cols
hash_encoded <- cbind(hash_encoded, dvcol)
prob_ratio_encoded <- data.table(data)[,lapply(.SD,function(x){encode_prob_ratio(x, dvcol)$encoded}),.SDcols=cat_cols]
prob_ratio_encoded <- cbind(prob_ratio_encoded, dvcol)
# prob_ratio_fit <- data.table(data)[,lapply(.SD,function(x){encode_prob_ratio(x, dvcol)$fit}),.SDcols=cat_cols]
prob_ratio_fit <- list()
for(i in cat_cols)
{
prob_ratio_fit[[i]] <- encode_prob_ratio(data[,i], dvcol)$fit
}
target_encoded <- data.table(data)[,lapply(.SD,function(x){encode_target(x, dvcol)$encoded}),.SDcols=cat_cols]
target_encoded <- cbind(target_encoded, dvcol)
# target_fit <- data.table(data)[,lapply(.SD,function(x){encode_target(x, dvcol)$fit}),.SDcols=cat_cols]
target_fit <- list()
for(i in cat_cols)
{
target_fit[[i]] <- encode_target(data[,i], dvcol)$fit
}
leave_one_out_encoded <- data.table(data)[,lapply(.SD,function(x){encode_leave_one_out(x, dvcol)$encoded}),.SDcols=cat_cols]
leave_one_out_encoded <- cbind(leave_one_out_encoded, dvcol)
leave_one_out_fit <- data.table(data)[,lapply(.SD,function(x){encode_leave_one_out(x, dvcol)$fit}),.SDcols=cat_cols]
woe_encoded <- data.table(data)[,lapply(.SD,function(x){encode_woe(x, dvcol)$encoded}),.SDcols=cat_cols]
woe_encoded <- cbind(woe_encoded, dvcol)
# woe_fit <- data.table(data)[,lapply(.SD,function(x){encode_woe(x, dvcol)$fit}),.SDcols=cat_cols]
woe_fit <- list()
for(i in cat_cols)
{
woe_fit[[i]] <- encode_woe(data[,i], dvcol)$fit
}
james_stein_encoded <- data.table(data)[,lapply(.SD,function(x){encode_james_stein(x, dvcol)$encoded}),.SDcols=cat_cols]
james_stein_encoded <- cbind(james_stein_encoded, dvcol)
# james_stein_fit <- data.table(data)[,lapply(.SD,function(x){encode_james_stein(x, dvcol)$fit}),.SDcols=cat_cols]
james_stein_fit <- list()
for(i in cat_cols)
{
james_stein_fit[[i]] <- encode_james_stein(data[,i], dvcol)$fit
}
m_estimator_encoded <- data.table(data)[,lapply(.SD,function(x){encode_m_estimator(x, dvcol)$encoded}),.SDcols=cat_cols]
m_estimator_encoded <- cbind(m_estimator_encoded, dvcol)
# m_estimator_fit <- data.table(data)[,lapply(.SD,function(x){encode_m_estimator(x, dvcol)$fit}),.SDcols=cat_cols]
m_estimator_fit <- list()
for(i in cat_cols)
{
m_estimator_fit[[i]] <- encode_m_estimator(data[,i], dvcol)$fit
}
{
dummy_encoded <- data.table(data)[,lapply(.SD,function(x){encode_dummy(x, dvcol)$encoded}),.SDcols=cat_cols]
dummy_encoded <- cbind(dummy_encoded, dvcol)
# dummy_fit <- data.table(data)[,lapply(.SD,function(x){encode_dummy(x, dvcol)$fit}),.SDcols=cat_cols]
dummy_fit <- list()
for(i in cat_cols)
{
dummy_fit[[i]] <- encode_dummy(data[,i], dvcol)$fit
}
simple_encoded <- data.table(data)[,lapply(.SD,function(x){encode_simple(x, dvcol)$encoded}),.SDcols=cat_cols]
simple_encoded <- cbind(simple_encoded, dvcol)
# simple_fit <- data.table(data)[,lapply(.SD,function(x){encode_simple(x, dvcol)$fit}),.SDcols=cat_cols]
simple_fit <- list()
for(i in cat_cols)
{
simple_fit[[i]] <- encode_simple(data[,i], dvcol)$fit
}
deviation_encoded <- data.table(data)[,lapply(.SD,function(x){encode_deviation(x, dvcol)$encoded}),.SDcols=cat_cols]
deviation_encoded <- cbind(deviation_encoded, dvcol)
# deviation_fit <- data.table(data)[,lapply(.SD,function(x){encode_deviation(x, dvcol)$fit}),.SDcols=cat_cols]
deviation_fit <- list()
for(i in cat_cols)
{
deviation_fit[[i]] <- encode_deviation(data[,i], dvcol)$fit
}
poly_encoded <- data.table(data)[,lapply(.SD,function(x){encode_poly(x, dvcol)$encoded}),.SDcols=cat_cols]
poly_encoded <- cbind(poly_encoded, dvcol)
# poly_fit <- data.table(data)[,lapply(.SD,function(x){encode_poly(x, dvcol)$fit}),.SDcols=cat_cols]
poly_fit <- list()
for(i in cat_cols)
{
poly_fit[[i]] <- encode_poly(data[,i], dvcol)$fit
}
rev_helmert_encoded <- data.table(data)[,lapply(.SD,function(x){encode_rev_helmert(x, dvcol)$encoded}),.SDcols=cat_cols]
rev_helmert_encoded <- cbind(rev_helmert_encoded, dvcol)
# rev_helmert_fit <- data.table(data)[,lapply(.SD,function(x){encode_rev_helmert(x, dvcol)$fit}),.SDcols=cat_cols]
rev_helmert_fit <- list()
for(i in cat_cols)
{
rev_helmert_fit[[i]] <- encode_rev_helmert(data[,i], dvcol)$fit
}
helmert_encoded <- data.table(data)[,lapply(.SD,function(x){encode_helmert(x, dvcol)$encoded}),.SDcols=cat_cols]
helmert_encoded <- cbind(helmert_encoded, dvcol)
# helmert_fit <- data.table(data)[,lapply(.SD,function(x){encode_helmert(x, dvcol)$fit}),.SDcols=cat_cols]
helmert_fit <- list()
for(i in cat_cols)
{
helmert_fit[[i]] <- encode_helmert(data[,i], dvcol)$fit
}
fwd_diff_encoded <- data.table(data)[,lapply(.SD,function(x){encode_fwd_diff(x, dvcol)$encoded}),.SDcols=cat_cols]
fwd_diff_encoded <- cbind(fwd_diff_encoded, dvcol)
# fwd_diff_fit <- data.table(data)[,lapply(.SD,function(x){encode_fwd_diff(x, dvcol)$fit}),.SDcols=cat_cols]
fwd_diff_fit <- list()
for(i in cat_cols)
{
fwd_diff_fit[[i]] <- encode_fwd_diff(data[,i], dvcol)$fit
}
bwd_diff_encoded <- data.table(data)[,lapply(.SD,function(x){encode_bwd_diff(x, dvcol)$encoded}),.SDcols=cat_cols]
bwd_diff_encoded <- cbind(bwd_diff_encoded, dvcol)
# bwd_diff_fit <- data.table(data)[,lapply(.SD,function(x){encode_bwd_diff(x, dvcol)$fit}),.SDcols=cat_cols]
bwd_diff_fit <- list()
for(i in cat_cols)
{
bwd_diff_fit[[i]] <- encode_bwd_diff(data[,i], dvcol)$fit
}
label_encoded <- data.table(data)[,lapply(.SD,function(x){encode_label(x)$encoded}),.SDcols=cat_cols]
label_encoded <- cbind(label_encoded, dvcol)
# label_fit <- data.table(data)[,lapply(.SD,function(x){encode_label(x)$fit}),.SDcols=cat_cols]
label_fit <- list()
for(i in cat_cols)
{
label_fit[[i]] <- encode_label(data[,i])$fit
}
one_hot_encoded <- data.frame()
one_hot_fit <- list()
for (i in cat_cols)
{
# print(i)
one_hot <- encode_onehot(data[, cat_cols], i)
ifelse(length(one_hot_encoded) == 0, one_hot_encoded <- one_hot$encoded, one_hot_encoded <- cbind(one_hot_encoded, one_hot$encoded))
one_hot_fit[[i]] <- one_hot$fit
}
one_hot_encoded <- cbind(one_hot_encoded, dvcol)
binary_encoded <- data.frame(mapply(encode_binary, data.table(data[, cat_cols]), cat_cols))
binary_encoded <- cbind(binary_encoded, dvcol)
binary_fit <- mapply(encode_binary, data.table(data[, cat_cols]), cat_cols, T)
freq_encoded <- data.table(data)[,lapply(.SD,function(x){encode_freq(x)$encoded}),.SDcols=cat_cols]
freq_encoded <- cbind(freq_encoded, dvcol)
# freq_fit <- data.table(data)[,lapply(.SD,function(x){encode_freq(x)$fit}),.SDcols=cat_cols]
freq_fit <- list()
for(i in cat_cols)
{
freq_fit[[i]] <- encode_freq(data[,i])$fit
}
hash_encoded <- data.frame()
hash_fit <- list()
for (i in cat_cols)
{
hash <- encode_hash(data[, cat_cols], i)
ifelse(length(hash_encoded) == 0, hash_encoded <- hash$encoded, hash_encoded <- cbind(hash_encoded, hash$encoded))
hash_fit[[i]] <- hash$fit
}
colnames(hash_encoded) <- cat_cols
hash_encoded <- cbind(hash_encoded, dvcol)
prob_ratio_encoded <- data.table(data)[,lapply(.SD,function(x){encode_prob_ratio(x, dvcol)$encoded}),.SDcols=cat_cols]
prob_ratio_encoded <- cbind(prob_ratio_encoded, dvcol)
# prob_ratio_fit <- data.table(data)[,lapply(.SD,function(x){encode_prob_ratio(x, dvcol)$fit}),.SDcols=cat_cols]
prob_ratio_fit <- list()
for(i in cat_cols)
{
prob_ratio_fit[[i]] <- encode_prob_ratio(data[,i], dvcol)$fit
}
target_encoded <- data.table(data)[,lapply(.SD,function(x){encode_target(x, dvcol)$encoded}),.SDcols=cat_cols]
target_encoded <- cbind(target_encoded, dvcol)
# target_fit <- data.table(data)[,lapply(.SD,function(x){encode_target(x, dvcol)$fit}),.SDcols=cat_cols]
target_fit <- list()
for(i in cat_cols)
{
target_fit[[i]] <- encode_target(data[,i], dvcol)$fit
}
leave_one_out_encoded <- data.table(data)[,lapply(.SD,function(x){encode_leave_one_out(x, dvcol)$encoded}),.SDcols=cat_cols]
leave_one_out_encoded <- cbind(leave_one_out_encoded, dvcol)
leave_one_out_fit <- data.table(data)[,lapply(.SD,function(x){encode_leave_one_out(x, dvcol)$fit}),.SDcols=cat_cols]
woe_encoded <- data.table(data)[,lapply(.SD,function(x){encode_woe(x, dvcol)$encoded}),.SDcols=cat_cols]
woe_encoded <- cbind(woe_encoded, dvcol)
# woe_fit <- data.table(data)[,lapply(.SD,function(x){encode_woe(x, dvcol)$fit}),.SDcols=cat_cols]
woe_fit <- list()
for(i in cat_cols)
{
woe_fit[[i]] <- encode_woe(data[,i], dvcol)$fit
}
james_stein_encoded <- data.table(data)[,lapply(.SD,function(x){encode_james_stein(x, dvcol)$encoded}),.SDcols=cat_cols]
james_stein_encoded <- cbind(james_stein_encoded, dvcol)
# james_stein_fit <- data.table(data)[,lapply(.SD,function(x){encode_james_stein(x, dvcol)$fit}),.SDcols=cat_cols]
james_stein_fit <- list()
for(i in cat_cols)
{
james_stein_fit[[i]] <- encode_james_stein(data[,i], dvcol)$fit
}
m_estimator_encoded <- data.table(data)[,lapply(.SD,function(x){encode_m_estimator(x, dvcol)$encoded}),.SDcols=cat_cols]
m_estimator_encoded <- cbind(m_estimator_encoded, dvcol)
# m_estimator_fit <- data.table(data)[,lapply(.SD,function(x){encode_m_estimator(x, dvcol)$fit}),.SDcols=cat_cols]
m_estimator_fit <- list()
for(i in cat_cols)
{
m_estimator_fit[[i]] <- encode_m_estimator(data[,i], dvcol)$fit
}
}
total_matrix_all <- list("Dummy Encoding" = dummy_encoded,
"Simple Encoding" = simple_encoded,
"Deviation Coding" = deviation_encoded,
"Polynomial Encoding" = poly_encoded,
"Reverse Helmert Encoding" = rev_helmert_encoded,
"Helmert Encoding" = helmert_encoded,
"Forward Difference Encoding" = fwd_diff_encoded,
"Backward Difference Encoding" = bwd_diff_encoded,
"Label Encoding" = label_encoded,
"One-Hot Encoding" = one_hot_encoded,
"Binary Encoding" = binary_encoded,
"Frequency Encoding" = freq_encoded,
"Hash Encoding" = hash_encoded,
"Probability Ratio Encoding" = prob_ratio_encoded,
"Target Encoding" = target_encoded,
"Leave One Out Encoding" = leave_one_out_encoded,
"Weight Of Evidence Encoding" = woe_encoded,
"James Stein Encoding" = james_stein_encoded,
"M-Estimator Encoding" = m_estimator_encoded)
encoding_fits <- list(dummy_fit, simple_fit, deviation_fit, poly_fit, rev_helmert_fit, helmert_fit, fwd_diff_fit, bwd_diff_fit, label_fit,one_hot_fit, binary_fit, freq_fit, hash_fit, prob_ratio_fit, target_fit, leave_one_out_fit, woe_fit, james_stein_fit, m_estimator_fit)
# library(pbmcapply)
output<-do.call(rbind,pbmclapply(seq(1:19), model_my_data,
data = total_matrix_all,
mc.cores = 1))
one_hot_encoded
cat_cols
one_hot_encoded <- data.frame()
one_hot_fit <- list()
for (i in cat_cols)
{
# print(i)
one_hot <- encode_onehot(data[, cat_cols], i)
ifelse(length(one_hot_encoded) == 0, one_hot_encoded <- one_hot$encoded, one_hot_encoded <- cbind(one_hot_encoded, one_hot$encoded))
one_hot_fit[[i]] <- one_hot$fit
}
colnames(one_hot_encoded)
one_hot(data.table(df), colname, sparsifyNAs=TRUE)
one_hot_encoded <- data.frame()
one_hot_fit <- list()
for (i in cat_cols)
{
# print(i)
one_hot <- encode_onehot(data[, cat_cols], i)
ifelse(length(one_hot_encoded) == 0, one_hot_encoded <- one_hot$encoded, one_hot_encoded <- cbind(one_hot_encoded, one_hot$encoded))
one_hot_fit[[i]] <- one_hot$fit
}
one_hot_fit
library(CatEncode)
hsb2 = read.table('https://stats.idre.ucla.edu/stat/data/hsb2.csv', header=T, sep=",")
data <- hsb2
dv <- "write"
# library(BestTransform)
# library(data.table)
dist <- data_distribution(data, dv)
library(CatEncode)
# library(BestTransform)
# library(data.table)
dist <- data_distribution(data, dv)
library(CatEncode)
library(CatEncode)
library(CatEncode)
hsb2 = read.table('https://stats.idre.ucla.edu/stat/data/hsb2.csv', header=T, sep=",")
data <- hsb2
dv <- "write"
BestCatEncode(data, dv)
# library(BestTransform)
# library(data.table)
dist <- data_distribution(data, dv)
library(BestTransform)
library(data.table)
# library(BestTransform)
# library(data.table)
dist <- data_distribution(data, dv)
cat_cols <- dist[(dist$distribution == "Categorical" & dist$is_dv == FALSE),]$names
dvcol <- data[,dv]
{
dummy_encoded <- data.table(data)[,lapply(.SD,function(x){encode_dummy(x, dvcol)$encoded}),.SDcols=cat_cols]
dummy_encoded <- cbind(dummy_encoded, dvcol)
# dummy_fit <- data.table(data)[,lapply(.SD,function(x){encode_dummy(x, dvcol)$fit}),.SDcols=cat_cols]
dummy_fit <- list()
for(i in cat_cols)
{
dummy_fit[[i]] <- encode_dummy(data[,i], dvcol)$fit
}
simple_encoded <- data.table(data)[,lapply(.SD,function(x){encode_simple(x, dvcol)$encoded}),.SDcols=cat_cols]
simple_encoded <- cbind(simple_encoded, dvcol)
# simple_fit <- data.table(data)[,lapply(.SD,function(x){encode_simple(x, dvcol)$fit}),.SDcols=cat_cols]
simple_fit <- list()
for(i in cat_cols)
{
simple_fit[[i]] <- encode_simple(data[,i], dvcol)$fit
}
deviation_encoded <- data.table(data)[,lapply(.SD,function(x){encode_deviation(x, dvcol)$encoded}),.SDcols=cat_cols]
deviation_encoded <- cbind(deviation_encoded, dvcol)
# deviation_fit <- data.table(data)[,lapply(.SD,function(x){encode_deviation(x, dvcol)$fit}),.SDcols=cat_cols]
deviation_fit <- list()
for(i in cat_cols)
{
deviation_fit[[i]] <- encode_deviation(data[,i], dvcol)$fit
}
poly_encoded <- data.table(data)[,lapply(.SD,function(x){encode_poly(x, dvcol)$encoded}),.SDcols=cat_cols]
poly_encoded <- cbind(poly_encoded, dvcol)
# poly_fit <- data.table(data)[,lapply(.SD,function(x){encode_poly(x, dvcol)$fit}),.SDcols=cat_cols]
poly_fit <- list()
for(i in cat_cols)
{
poly_fit[[i]] <- encode_poly(data[,i], dvcol)$fit
}
rev_helmert_encoded <- data.table(data)[,lapply(.SD,function(x){encode_rev_helmert(x, dvcol)$encoded}),.SDcols=cat_cols]
rev_helmert_encoded <- cbind(rev_helmert_encoded, dvcol)
# rev_helmert_fit <- data.table(data)[,lapply(.SD,function(x){encode_rev_helmert(x, dvcol)$fit}),.SDcols=cat_cols]
rev_helmert_fit <- list()
for(i in cat_cols)
{
rev_helmert_fit[[i]] <- encode_rev_helmert(data[,i], dvcol)$fit
}
helmert_encoded <- data.table(data)[,lapply(.SD,function(x){encode_helmert(x, dvcol)$encoded}),.SDcols=cat_cols]
helmert_encoded <- cbind(helmert_encoded, dvcol)
# helmert_fit <- data.table(data)[,lapply(.SD,function(x){encode_helmert(x, dvcol)$fit}),.SDcols=cat_cols]
helmert_fit <- list()
for(i in cat_cols)
{
helmert_fit[[i]] <- encode_helmert(data[,i], dvcol)$fit
}
fwd_diff_encoded <- data.table(data)[,lapply(.SD,function(x){encode_fwd_diff(x, dvcol)$encoded}),.SDcols=cat_cols]
fwd_diff_encoded <- cbind(fwd_diff_encoded, dvcol)
# fwd_diff_fit <- data.table(data)[,lapply(.SD,function(x){encode_fwd_diff(x, dvcol)$fit}),.SDcols=cat_cols]
fwd_diff_fit <- list()
for(i in cat_cols)
{
fwd_diff_fit[[i]] <- encode_fwd_diff(data[,i], dvcol)$fit
}
bwd_diff_encoded <- data.table(data)[,lapply(.SD,function(x){encode_bwd_diff(x, dvcol)$encoded}),.SDcols=cat_cols]
bwd_diff_encoded <- cbind(bwd_diff_encoded, dvcol)
# bwd_diff_fit <- data.table(data)[,lapply(.SD,function(x){encode_bwd_diff(x, dvcol)$fit}),.SDcols=cat_cols]
bwd_diff_fit <- list()
for(i in cat_cols)
{
bwd_diff_fit[[i]] <- encode_bwd_diff(data[,i], dvcol)$fit
}
label_encoded <- data.table(data)[,lapply(.SD,function(x){encode_label(x)$encoded}),.SDcols=cat_cols]
label_encoded <- cbind(label_encoded, dvcol)
# label_fit <- data.table(data)[,lapply(.SD,function(x){encode_label(x)$fit}),.SDcols=cat_cols]
label_fit <- list()
for(i in cat_cols)
{
label_fit[[i]] <- encode_label(data[,i])$fit
}
one_hot_encoded <- data.frame()
one_hot_fit <- list()
for (i in cat_cols)
{
# print(i)
one_hot <- encode_onehot(data[, cat_cols], i)
ifelse(length(one_hot_encoded) == 0, one_hot_encoded <- one_hot$encoded, one_hot_encoded <- cbind(one_hot_encoded, one_hot$encoded))
one_hot_fit[[i]] <- one_hot$fit
}
one_hot_encoded <- cbind(one_hot_encoded, dvcol)
binary_encoded <- data.frame(mapply(encode_binary, data.table(data[, cat_cols]), cat_cols))
binary_encoded <- cbind(binary_encoded, dvcol)
binary_fit <- mapply(encode_binary, data.table(data[, cat_cols]), cat_cols, T)
freq_encoded <- data.table(data)[,lapply(.SD,function(x){encode_freq(x)$encoded}),.SDcols=cat_cols]
freq_encoded <- cbind(freq_encoded, dvcol)
# freq_fit <- data.table(data)[,lapply(.SD,function(x){encode_freq(x)$fit}),.SDcols=cat_cols]
freq_fit <- list()
for(i in cat_cols)
{
freq_fit[[i]] <- encode_freq(data[,i])$fit
}
hash_encoded <- data.frame()
hash_fit <- list()
for (i in cat_cols)
{
hash <- encode_hash(data[, cat_cols], i)
ifelse(length(hash_encoded) == 0, hash_encoded <- hash$encoded, hash_encoded <- cbind(hash_encoded, hash$encoded))
hash_fit[[i]] <- hash$fit
}
colnames(hash_encoded) <- cat_cols
hash_encoded <- cbind(hash_encoded, dvcol)
prob_ratio_encoded <- data.table(data)[,lapply(.SD,function(x){encode_prob_ratio(x, dvcol)$encoded}),.SDcols=cat_cols]
prob_ratio_encoded <- cbind(prob_ratio_encoded, dvcol)
# prob_ratio_fit <- data.table(data)[,lapply(.SD,function(x){encode_prob_ratio(x, dvcol)$fit}),.SDcols=cat_cols]
prob_ratio_fit <- list()
for(i in cat_cols)
{
prob_ratio_fit[[i]] <- encode_prob_ratio(data[,i], dvcol)$fit
}
target_encoded <- data.table(data)[,lapply(.SD,function(x){encode_target(x, dvcol)$encoded}),.SDcols=cat_cols]
target_encoded <- cbind(target_encoded, dvcol)
# target_fit <- data.table(data)[,lapply(.SD,function(x){encode_target(x, dvcol)$fit}),.SDcols=cat_cols]
target_fit <- list()
for(i in cat_cols)
{
target_fit[[i]] <- encode_target(data[,i], dvcol)$fit
}
leave_one_out_encoded <- data.table(data)[,lapply(.SD,function(x){encode_leave_one_out(x, dvcol)$encoded}),.SDcols=cat_cols]
leave_one_out_encoded <- cbind(leave_one_out_encoded, dvcol)
leave_one_out_fit <- data.table(data)[,lapply(.SD,function(x){encode_leave_one_out(x, dvcol)$fit}),.SDcols=cat_cols]
woe_encoded <- data.table(data)[,lapply(.SD,function(x){encode_woe(x, dvcol)$encoded}),.SDcols=cat_cols]
woe_encoded <- cbind(woe_encoded, dvcol)
# woe_fit <- data.table(data)[,lapply(.SD,function(x){encode_woe(x, dvcol)$fit}),.SDcols=cat_cols]
woe_fit <- list()
for(i in cat_cols)
{
woe_fit[[i]] <- encode_woe(data[,i], dvcol)$fit
}
james_stein_encoded <- data.table(data)[,lapply(.SD,function(x){encode_james_stein(x, dvcol)$encoded}),.SDcols=cat_cols]
james_stein_encoded <- cbind(james_stein_encoded, dvcol)
# james_stein_fit <- data.table(data)[,lapply(.SD,function(x){encode_james_stein(x, dvcol)$fit}),.SDcols=cat_cols]
james_stein_fit <- list()
for(i in cat_cols)
{
james_stein_fit[[i]] <- encode_james_stein(data[,i], dvcol)$fit
}
m_estimator_encoded <- data.table(data)[,lapply(.SD,function(x){encode_m_estimator(x, dvcol)$encoded}),.SDcols=cat_cols]
m_estimator_encoded <- cbind(m_estimator_encoded, dvcol)
# m_estimator_fit <- data.table(data)[,lapply(.SD,function(x){encode_m_estimator(x, dvcol)$fit}),.SDcols=cat_cols]
m_estimator_fit <- list()
for(i in cat_cols)
{
m_estimator_fit[[i]] <- encode_m_estimator(data[,i], dvcol)$fit
}
}
one_hot_encoded
one_hot_encoded <- data.frame()
one_hot_fit <- list()
for (i in cat_cols)
{
# print(i)
one_hot <- encode_onehot(data[, cat_cols], i)
ifelse(length(one_hot_encoded) == 0, one_hot_encoded <- one_hot$encoded, one_hot_encoded <- cbind(one_hot_encoded, one_hot$encoded))
one_hot_fit[[i]] <- one_hot$fit
}
one_hot_encoded
cat_cols
i <- cat_cols[1]
encode_onehot(data[, cat_cols], i)
df <- data[, cat_cols[1]]
df
colname <- cat_cols[1]
colname
# library(mltools)
df <- data.frame(df)
df
df[, c(colname)]
df <- data[, cat_cols]
df
i
colname
# library(mltools)
df <- data.frame(df)
df[, c(colname)] <- factor(df[, c(colname)])
df[, c(colname)]
new_df <- one_hot(data.table(df), colname, sparsifyNAs=TRUE)
library(mltools)
new_df <- one_hot(data.table(df), colname, sparsifyNAs=TRUE)
new_df
!colnames(new_df) %in% colnames(df)
new_df[, !colnames(new_df) %in% colnames(df)]
new_df[, !colnames(new_df) %in% colnames(df), with=T]
data.frame(new_df)[, !colnames(new_df) %in% colnames(df)]
library(CatEncode)
library(CatEncode)
hsb2 = read.table('https://stats.idre.ucla.edu/stat/data/hsb2.csv', header=T, sep=",")
BestCatEncode(hsb2, "write")
library(CatEncode)
library(CatEncode)
devtools::check()
